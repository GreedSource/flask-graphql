type User {
  id: ID!
  username: String!
  email: String!
  isAdmin: Boolean!
}

input RegisterInput {
  username: String!
  email: String!
  password: String!
  confirm_password: String!
}

input LoginInput {
  username: String!
  password: String!
}

type AuthPayload {
  token: String!
  user: User!
}

extend type Query {
  users: [User!]!
  user(id: ID!): User
}

input UpdateUserInput {
  id: ID!
  username: String
  email: String
  isAdmin: Boolean
}

type Mutation {
  register(input: RegisterInput!): AuthPayload!
  login(input: LoginInput!): AuthPayload!
  recoverPassword(email: String!): Boolean!
  updateUser(input: UpdateUserInput!): User!
  deleteUser(id: ID!): Boolean!
}
